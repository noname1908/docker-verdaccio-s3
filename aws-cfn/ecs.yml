AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Region:
    Description: The region to run in
    Type: String
    Default: ap-northeast-1
  AppName:
    Type: String
    Description: Name of application
    Default: c2c-npm
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC
  SubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: The first subnet in the vpc
  SubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: The second subnet in the vpc
  CertificateArn:
    Type: String
    Description: Certificate Arn from the certificate manager.
  EcsImage:
    Type: String
    Description: The docker image to use.
    Default: verdaccio/verdaccio
  HostedZoneId:
    Type: String
    Description: The zone id to create the cname under.
  Domain:
    Type: String
    Description: The domain of where to host the npm registry

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-cluster

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref 'SubnetOne'
        - !Ref 'SubnetTwo'
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']

  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${AppName}-drop-1
      Port: 4873
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub ${AppName}-ecs-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub ${AppName}-AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'

                # Allow the ECS tasks to access EFS
                - 'elasticfilesystem:CreateMountTarget'
                - 'elasticfilesystem:ClientMount'
                - 'elasticfilesystem:ClientWrite'
                - 'elasticfilesystem:ClientRootAccess'
                - 'elasticfilesystem:CreateFileSystem'
              Resource: '*'

  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${AppName}-logs
      RetentionInDays: 60

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-taskdef
      RequiresCompatibilities:
        - "FARGATE"
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref 'AppName'
          Image: !Ref 'EcsImage'
          Memory: 256
          PortMappings:
            - ContainerPort: 4873
          Environment:
            - Name: VERDACCIO_PUBLIC_URL
              Value: !Sub https://${Domain}/
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref Region
              awslogs-stream-prefix: !Sub ${AppName}-awslogs
          mountPoints:
            - readOnly: false
              containerPath: "/verdaccio/conf"
              sourceVolume: efs-npm-conf
            - readOnly: false
              containerPath: "/verdaccio/plugins"
              sourceVolume: efs-npm-plugins
            - readOnly: false
              containerPath: "/verdaccio/storage"
              sourceVolume: efs-npm-storage
      volumes:
        - efsVolumeConfiguration:
            fileSystemId: !Ref 'Efs'
            authorizationConfig:
              iam: ENABLED
              accessPointId:
            transitEncryption: ENABLED
            rootDirectory: "/conf"
          name: efs-npm-conf
        - efsVolumeConfiguration:
            fileSystemId: !Ref 'Efs'
            authorizationConfig:
              iam: ENABLED
              accessPointId:
            transitEncryption: ENABLED
            rootDirectory: "/storage"
          name: efs-npm-storage
        - efsVolumeConfiguration:
            fileSystemId: !Ref 'Efs'
            authorizationConfig:
              iam: ENABLED
              accessPointId:
            transitEncryption: ENABLED
            rootDirectory: "/plugins"
          name: efs-npm-plugins

  FargateService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub ${AppName}-service
      Cluster: !Ref 'Cluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'FargateContainerSecurityGroup'
          Subnets:
            - !Ref 'SubnetOne'
            - !Ref 'SubnetTwo'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'AppName'
          ContainerPort: 4873
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${AppName}-target-group
      Port: 4873
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref 'PublicLoadBalancerListener'
      Priority: 1

  DnsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'PublicLoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'PublicLoadBalancer.DNSName'
        EvaluateTargetHealth: true
      Region: !Ref Region
      SetIdentifier: !Sub ${AppName}-${Region}

  Efs:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AppName'

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Allow connections from the ${AppName} ASG'
      Tags:
        - Key: Name
          Value: !Sub '${AppName} EFS'
      VpcId: !Ref 'VPC'

  EfsSgFsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EfsSg'
      FromPort: 2049
      ToPort: 2049
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  EfsMountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'Efs'
      SecurityGroups: !Ref 'EfsSg'
      SubnetId: !Ref 'SubnetOne'

  EfsMountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'Efs'
      SecurityGroups: !Ref 'EfsSg'
      SubnetId: !Ref 'SubnetTwo'

Outputs:
  Hostname:
    Value: !Ref 'DnsRecordSet'
      
